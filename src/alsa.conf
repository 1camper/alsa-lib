#
#  ALSA library configuration file
#

pcm.default {
	type plug
	slave.pcm {
		type hw
		card {
			@func getenv
			@type integer
			envname [
				ALSA_PCM_CARD
				ALSA_CARD
			]
			default 0
		}
		device {
			@func getenv
			@type integer
			envname [
				ALSA_PCM_DEVICE
			]
			default 0
		}
		subdevice -1
	}
}

pcm.hw {
	args [ CARD DEV SUBDEV ]
	args.CARD {
		type integer
	}
	args.DEV {
		type integer
	}
	args.SUBDEV {
		type integer
		default -1
	}		
	type hw
	card $(CARD)
	device $(DEV)
	subdevice $(SUBDEV)
}

pcm.plughw {
	args [ CARD DEV SUBDEV ]
	args.CARD {
		type integer
	}
	args.DEV {
		type integer
	}
	args.SUBDEV {
		type integer
		default -1
	}		
	type plug
	slave.pcm {
		type hw
		card $(CARD)
		device $(DEV)
		subdevice $(SUBDEV)
	}
}

pcm.plug {
	args [ SLAVE ]
	args.SLAVE {
		type string
	}
	type plug
	slave.pcm $(SLAVE)
}

pcm.shm {
	args [ SOCKET PCM ]
	args.SOCKET {
		type string
	}
	args.PCM {
		type string
	}
	type shm
	server $(SOCKET)
	pcm $(PCM)
}

pcm.tee {
	args [ SLAVE FILE FORMAT ]
	args.SLAVE {
		type string
	}
	args.FILE {
		type string
	}
	args.FORMAT {
		type string
		default raw
	}
	type file
	slave.pcm $(SLAVE)
	file $(FILE)
	format $(FORMAT)
}

pcm.file {
	args [ FILE FORMAT ]
	args.FILE {
		type string
	}
	args.FORMAT {
		type string
		default raw
	}
	type file
	slave.pcm null
	file $(FILE)
	format $(FORMAT)
}

pcm.surround40 {
	args [ CARD DEV ]
	args.CARD {
		type integer
		default {
			@func getenv
			@type integer
			envname [
				ALSA_SURROUND40_CARD
				ALSA_PCM_CARD
				ALSA_CARD
			]
			default 0
		}
	}
	args.DEV {
		type integer
		default {
			@func getenv
			@type integer
			envname [
				ALSA_SURROUND40_DEVICE
			]
			default 0
		}
	}
	redirect {
		filename {
			@func concat
			strings [
				{
					@func datadir
				}
				"/cards/"
				{
					@func card_strtype
					card $(CARD)
				}
				".conf"
			]
		}
		name {
			@func concat
			strings [
				"pcm.surround40_" $(DEV) "_"
				{
					@func pcm_id
					card $(CARD)
					device 0
				}
				":" $(CARD)
			]
		}
	}
}
	
pcm.surround51 {
	args [ CARD DEV ]
	args.CARD {
		type integer
		default {
			@func getenv
			@type integer
			envname [
				ALSA_SURROUND51_CARD
				ALSA_PCM_CARD
				ALSA_CARD
			]
			default 0
		}
	}
	args.DEV {
		type integer
		default <@ALSA_SURROUND51_DEVICE:0@>
	}
	type surround
	card $(CARD)
	device $(DEVICE)
	stype "5.1"
}
	
pcm.null {
	type null
}
	
ctl.default {
	type hw
	card <@ALSA_CARD:0@>
}

ctl.hw {
	args[ CARD ]
	args.CARD {
		type integer
	}
	type hw
	card $(CARD)
}

ctl.shm {
	args [ SOCKET CTL ]
	args.SOCKET {
		type string
	}
	args.CTL {
		type string
	}
	type shm
	server $(SOCKET)
	ctl $(CTL)
}

rawmidi.default {
	type hw
	card {
		@func getenv
		@type integer
		envname [
			ALSA_RAWMIDI_CARD
			ALSA_CARD
		]
		default 0
	}
	device {
		@func getenv
		@type integer
		envname [
			ALSA_RAWMIDI_DEVICE
		]
		default 0
	}
}

rawmidi.hw {
	args [ CARD DEV SUBDEV ]
	args.CARD {
		type integer
	}
	args.DEV {
		type integer
	}
	args.SUBDEV {
		type integer
		default -1
	}
	type hw
	card $(CARD)
	device $(DEV)
	subdevice $(SUBDEV)
}

seq.default {
	type hw
}

seq.hw {
	type hw
}

pcm.iec958 {
	args [ PCM AES0 AES1 AES2 AES3 ]
	args.PCM {
		type string
		default default
	}
	args.AES0 {
		type integer
		# IEC958_AES0_PROFESSIONAL | IEC958_AES0_NONAUDIO |
		# IEC958_AES0_PRO_EMPHASIS_NONE | IEC958_AES0_PRO_FS_48000
		default 0x87
	}
	args.AES1 {
		type integer
		default 0x00
	}
	args.AES2 {
		type integer
		default 0x00
	}
	args.AES3 {
		type integer
		default 0x00
	}
	type hooks
	slave.pcm $(PCM)
	hooks [
		{
			type ctl_elems
			args [
				name "IEC958 Playback PCM Stream"
				subdevice 0
				preserve true
				lock true
				value.0 $(AES0)
				value.1 $(AES1)
				value.2 $(AES2)
				value.3 $(AES3)
			]
		}
	]
}
